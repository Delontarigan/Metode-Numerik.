import numpy as np
import matplotlib.pyplot as plt

# Given data points
x = np.array([5, 10, 15, 20, 25, 30, 35, 40])
y = np.array([40, 30, 25, 40, 18, 20, 22, 15])

# Lagrange Interpolation
def lagrange_interpolation(x_points, y_points, x):
    def L(k, x):    
        terms = [(x - x_points[j]) / (x_points[k] - x_points[j]) for j in range(len(x_points)) if j != k]
        return np.prod(terms)
    
    return sum(y_points[k] * L(k, x) for k in range(len(x_points)))

# Newton Interpolation
def newton_interpolation(x_points, y_points, x):
    n = len(x_points)
    coef = np.zeros([n, n])
    coef[:,0] = y_points
    
    for j in range(1, n):
        for i in range(n-j):
            coef[i,j] = (coef[i+1, j-1] - coef[i, j-1]) / (x_points[i+j] - x_points[i])
    
    def P(x):
        result = coef[0,0]
        for i in range(1, n):
            term = coef[0,i]
            for j in range(i):
                term *= (x - x_points[j])
            result += term
        return result
    
    return P(x)

# Generate points for plotting
x_values = np.linspace(5, 40, 400)
y_lagrange = [lagrange_interpolation(x, y, xi) for xi in x_values]
y_newton = [newton_interpolation(x, y, xi) for xi in x_values]

# Plot the results
plt.figure(figsize=(12, 6))
plt.plot(x, y, 'o', label='Data points')
plt.plot(x_values, y_lagrange, '-', label='Lagrange Interpolation')
plt.plot(x_values, y_newton, '--', label='Newton Interpolation')
plt.xlabel('Tegangan (kg/mmÂ²)')
plt.ylabel('Waktu patah (jam)')
plt.title('Interpolation using Lagrange and Newton Methods')
plt.legend()
plt.grid(True)
plt.show()
